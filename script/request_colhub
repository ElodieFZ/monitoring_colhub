#!/usr/bin/env python3

"""
Get list of products from a Sentinel DataHub using sentinelsat
"""

import argparse
import pathlib
import yaml
import logging
import datetime as dt
import pandas as pd
from tools import utils, sentinel_hub


#todo: replace -wn True/False and -wl True/False by action

def parse_arguments():
    parser = argparse.ArgumentParser(description='Get list of products from a Sentinel hub.')
    parser.add_argument('-p', dest='product', default='S1',
                        help="Sentinel products to check (S1, S2L2A, S2L1C, S2DEM, S3, S5p)")
    parser.add_argument('-a', dest='area', default='global',
                        help="which area to query")
    parser.add_argument('-d1', dest='syyyymmdd1', required=False,
                        help='First sensing date (YYYYMMDD). Default is current day.')
    parser.add_argument('-d2', dest='syyyymmdd2', required=False,
                        help='Second sensing date (YYYYMMDD). Default is first date.')
    parser.add_argument('-id1', dest='iyyyymmdd1', required=False,
                        help='First ingestion date (YYYYMMDD). Default is current day.')
    parser.add_argument('-id2', dest='iyyyymmdd2', required=False,
                        help='Second ingestion date (YYYYMMDD). Default is first date.')
    parser.add_argument("-wl", "--write_list", help="Write list of products found to file?", type=str, default=False)
    parser.add_argument("-ld", "--list_outdir", help="Text file where to write list of products found", type=pathlib.Path, default=None)
    parser.add_argument("-wn", "--write_nb", help="Write nb of products found to file?", type=str, default=True)
    parser.add_argument("-of", "--nb_outfile", help="Tex file where to write the nb of products found (a mode)", type=pathlib.Path, default=None)
    parser.add_argument("-dh", '--datahub', help=('datahub'), type=str, default="colhub_nbs")
    parser.add_argument("-l", '--logdir', help=('Log directory'), type=pathlib.Path, required=True)
    return parser.parse_args()
    

if __name__ == '__main__':

    args = parse_arguments()
    cfgdir = pathlib.Path(__file__).resolve().parent.parent / 'cfg'

    # If a log dir is specified, log to file,
    # Otherwise, log to stdout
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(utils.setup_log(args.logdir/f"request_hub_{args.datahub}_{args.product}--{dt.datetime.now().strftime('%Y%m%d-%H%M%S')}.log"))

    # Read datahub config file
    with open((cfgdir / 'datahubs_monitoring').with_suffix('.yaml')) as f:
        cfg_datahub = yaml.load(f, Loader=yaml.FullLoader)

    # Default sensing start date is today
    if args.syyyymmdd1:
        sensing_start = pd.to_datetime(args.syyyymmdd1, format='%Y%m%d')
    else:
        sensing_start = pd.to_datetime('today').date()

    # Default sensing end date is sensing start date
    if args.syyyymmdd2:
        sensing_end = pd.to_datetime(args.syyyymmdd2, format='%Y%m%d')
    else:
        sensing_end = sensing_start

    # Read product specifications
    with open((cfgdir / 'products' / args.product).with_suffix('.yaml')) as f:
        query = yaml.load(f, Loader=yaml.FullLoader)

    # Add full path to footprints
    # todo: find a better way to do that!
    footprint = (pathlib.Path('/home/nbs/nbs_footprints') / args.area).with_suffix('.geojson')

    # todo what to do with ingestion dates?
    # If no ingestion date provided, query between sensing start and now
    #if args.iyyyymmdd1:
    #    query['ingestion_start'], query['ingestion_end'] = args.iyyyymmdd1, args.iyyyymmdd2
    #else:
    #    query['ingestion_start'] = sensing_start
    #    query['ingestion_end'] = pd.to_datetime('today')

    # Connect to datahub
    myhub = sentinel_hub.connect_hub(cfg_datahub[args.datahub], cfg_datahub['credentials'])

    out = []
    for date in pd.date_range(sensing_start, sensing_end):

        logger.info(f'Checking product {args.product} for date {date} for zone {args.area}')

        # Request to datahub
        products_found = sentinel_hub.query_hub(myhub, date, date + pd.Timedelta(days=1) - pd.Timedelta(seconds=1), footprint, query)

        # Write list of products_found to text file
        if len(products_found) > 0:
            if args.write_list:
                logger.info(f"Writing list to {args.list_outdir}")
                products_found[['title', 'uuid']].to_csv(args.list_outdir / ('_'.join(['products_list_in', cfg_datahub['name']]) + '.csv') , header=False, index=False, mode='a')
        if args.write_nb:
            out.append({'product': args.product, 'area': args.area, 'sensing_date': date, 'nb_products': len(products_found)})
        else:
            logger.info(f"No products found")

    if args.write_nb:
        pd.DataFrame(out).to_csv(args.nb_outfile, index=False, mode='a', header=None)

